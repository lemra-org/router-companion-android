/*
 * DD-WRT Companion is a mobile app that lets you connect to,
 * monitor and manage your DD-WRT routers on the go.
 *
 * Copyright (C) 2014-2022  Armel Soro
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Contact Info: Armel Soro <armel+router_companion@rm3l.org>
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {

    ext {
        android_sdk = 31
        android_min_sdk = 21
        androidx_appcompat_version = '1.3.1'
        buildScan_version = '2.2.1'
//        buildTools_version = '29.0.2'
        androidGradleBuildPlugin_version = '7.4.0-alpha02'
        androidx_version = '1.0.0'
        kotlin_version = '1.6.21'
	    ktlint_version = '0.39.0'
//        android_ktx_version = '1.0.0'
        anko_version = '0.10.8'
        playServices_version = '20.1.0'
//        firebase_core_version = '17.2.3'
        firebase_appindexing_version = '20.0.0'
        robolectric_version = '4.8.1'
        junit_version = '4.13.2'
        mockito_version = '4.6.0'
//        avocarrot_glispa_mobfox_version = '3.6.9'

        playPublisherPlugin_version = '3.7.0'
        googlePlayServicesPlugin_version = '4.3.10'

        maoni_version = '10.0.0'

        leakCanaryVersion = '2.9.1'

        dexter_runtimePermissions_version = '6.2.3'

        multidex_version = "2.0.1"
    }

    //Workaround to have the 'com.android.application' plugin with any version of Gradle (other than the expected one)
    //see https://github.com/gradle/gradle-script-kotlin/issues/2#issuecomment-222120296
    System.properties['com.android.build.gradle.overrideVersionCheck'] = 'true'
    repositories {
        google()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        classpath "com.diffplug.spotless:spotless-plugin-gradle:6.3.0"
//        classpath "com.gradle:gradle-enterprise-gradle-plugin:3.1.1"
        classpath "com.android.tools.build:gradle:$androidGradleBuildPlugin_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "com.github.triplet.gradle:play-publisher:$playPublisherPlugin_version"
        classpath "com.google.gms:google-services:$googlePlayServicesPlugin_version"
    }
}

//apply plugin: "com.gradle.build-scan"
apply plugin: 'idea'
apply plugin: 'kotlin'
//apply plugin: 'kotlin-kapt'

allprojects {
    repositories {
        mavenCentral()
        google()
        jcenter()
        maven {
            url "https://jitpack.io"
            content {
                // this repository contains everything BUT artifacts with group starting with "my.company"
                excludeGroupByRegex "org\\.rm3l.*"
            }
        }
        flatDir {
            dirs 'libs'
        }
    }

    task listRepos {
        doLast {
            println "Repositories:"
            project.repositories.each { println "Name: " + it.name + "; url: " + it.url }
        }
    }

    apply plugin: "com.diffplug.spotless"

    spotless {
        kotlin {
            target "**/*.kt"
            ktlint(ktlint_version)
        }
        java {
            // ...
            target '**/*.java'
            // ...
            googleJavaFormat()
        }
        sql {
            // default value for target files
            target '**/*.sql'
        }
        format 'xml', {
            target fileTree('.') {
                include '**/*.xml', '**/*.xsd'
                exclude '**/build/**'
            }
            // Use for example eclipseWtp('xml', '4.7.3a') to specify a specific version of Eclipse,
            // available versions are: https://github.com/diffplug/spotless/tree/master/lib-extra/src/main/resources/com/diffplug/spotless/extra/eclipse_wtp_formatters
            eclipseWtp('xml', '4.12.0')
        }
    }
}

subprojects {
    repositories {
        google()
        maven {
            url 'http://clojars.org/repo'
            allowInsecureProtocol = true
        }
    }
}

def localPropertiesFile = rootProject.file("local.properties")
ext.localProperties = new Properties()
if (localPropertiesFile.exists()) {
    rootProject.localProperties.load(new FileInputStream(localPropertiesFile))
}

def homePath = System.properties['user.home'].toString()

ext.getPlayStoreConfig = {
    return file(homePath + "/.droid/PlayStore.keys.json")
}

final propsFile = new File(homePath + "/.droid/keystore.properties")
def storeFile = file('/dev/null')
def keyPassword = ""
if (propsFile.exists()) {
    logger.debug("[Signing] Using properties file located at ${propsFile.absolutePath}")
    final props = new Properties()
    props.load(new FileInputStream(propsFile))
    storeFile = new File(props['keystore'].toString())
    keyPassword = props['keyPassword']
}
ext.getReleaseSigningConfig = {
    return ['DDWRTCompanionAndroidKey', storeFile, keyPassword, keyPassword]
}
ext.getDebugSigningConfig = {
    return ['androiddebugkey', new File("${rootDir}/debug.keystore"), 'android', 'android']
}

ext.getVersionCodeAndName = {
    flavorName ->
        // Fetch the version according to git latest tag and "how far we are from last tag"
        def longVersionName = "git -C ${rootDir} describe --tags --long HEAD".execute().text.trim()
        def (fullVersionTag, versionBuild, gitSha) = longVersionName.tokenize('-')
        def latestTagGitCommit = "git -C ${rootDir} rev-list rev-list -n 1 ${fullVersionTag}".execute().text.trim()
        def (versionMajor, versionMinor, versionPatch) = fullVersionTag.tokenize('.')
        def gitCommitHash = "git -C ${rootDir} rev-parse --short HEAD".execute().text.trim()

        logger.debug("[Git] getVersionName($flavorName): \n" +
                "rootDir = $rootDir , \n" +
                "latestTagGitCommit = $latestTagGitCommit , \n" +
                "longVersionName = $longVersionName , \n" +
                "fullVersionTag = $fullVersionTag , \n" +
                "versionBuild = $versionBuild , \n" +
                "gitSha = $gitSha , \n" +
                "versionMajor = $versionMajor , \n" +
                "versionMinor = $versionMinor , \n" +
                "versionPatch = $versionPatch , \n" +
                "gitCommitHash = $gitCommitHash")

        // Return the version name
        final versionNameFullVersionLast = versionBuild ? "-$versionBuild" : ""
        final versionName = "$fullVersionTag$versionNameFullVersionLast/$gitCommitHash-$flavorName"
        final versionCode = (
                versionMajor.toInteger() * 100000 +
                        versionMinor.toInteger() * 10000 +
                        versionPatch.toInteger() * 1000 +
                        versionBuild.toInteger())

        return [versionCode, versionName]

}
repositories {
    google()
    //jcenter()
    mavenCentral()
}
dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "11"
    }
}

idea.module {
    excludeDirs += file('.buckd/')
    excludeDirs += file('.idea/')
    excludeDirs += file('.okbuck/')
    excludeDirs += file('buck-out/')
}

//kapt {
//    useBuildCache = true
//}
//gradleEnterprise {
//    buildScan {
//        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
//        termsOfServiceAgree = 'yes'
//
//        if (System.getenv('CI')) {
//            publishAlways()
//            tag 'CI'
//        }
//    }
//}
